// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transition_2eproto;
namespace ddrl {
class enb_transition;
class enb_transitionDefaultTypeInternal;
extern enb_transitionDefaultTypeInternal _enb_transition_default_instance_;
class ue_transition;
class ue_transitionDefaultTypeInternal;
extern ue_transitionDefaultTypeInternal _ue_transition_default_instance_;
}  // namespace ddrl
PROTOBUF_NAMESPACE_OPEN
template<> ::ddrl::enb_transition* Arena::CreateMaybeMessage<::ddrl::enb_transition>(Arena*);
template<> ::ddrl::ue_transition* Arena::CreateMaybeMessage<::ddrl::ue_transition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ddrl {

// ===================================================================

class ue_transition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddrl.ue_transition) */ {
 public:
  inline ue_transition() : ue_transition(nullptr) {};
  virtual ~ue_transition();

  ue_transition(const ue_transition& from);
  ue_transition(ue_transition&& from) noexcept
    : ue_transition() {
    *this = ::std::move(from);
  }

  inline ue_transition& operator=(const ue_transition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ue_transition& operator=(ue_transition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ue_transition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ue_transition* internal_default_instance() {
    return reinterpret_cast<const ue_transition*>(
               &_ue_transition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ue_transition& a, ue_transition& b) {
    a.Swap(&b);
  }
  inline void Swap(ue_transition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ue_transition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ue_transition* New() const final {
    return CreateMaybeMessage<ue_transition>(nullptr);
  }

  ue_transition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ue_transition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ue_transition& from);
  void MergeFrom(const ue_transition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ue_transition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddrl.ue_transition";
  }
  protected:
  explicit ue_transition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 4,
    kActionFieldNumber = 5,
    kNextStateFieldNumber = 6,
    kRntiFieldNumber = 1,
    kIdFieldNumber = 2,
    kRewardFieldNumber = 3,
  };
  // repeated float state = 4;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  private:
  float _internal_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_state() const;
  void _internal_add_state(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_state();
  public:
  float state(int index) const;
  void set_state(int index, float value);
  void add_state(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_state();

  // repeated float action = 5;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  private:
  float _internal_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_action() const;
  void _internal_add_action(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_action();
  public:
  float action(int index) const;
  void set_action(int index, float value);
  void add_action(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_action();

  // repeated float next_state = 6;
  int next_state_size() const;
  private:
  int _internal_next_state_size() const;
  public:
  void clear_next_state();
  private:
  float _internal_next_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_next_state() const;
  void _internal_add_next_state(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_next_state();
  public:
  float next_state(int index) const;
  void set_next_state(int index, float value);
  void add_next_state(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      next_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_next_state();

  // uint32 rnti = 1;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float reward = 3;
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // @@protoc_insertion_point(class_scope:ddrl.ue_transition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > state_;
  mutable std::atomic<int> _state_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > action_;
  mutable std::atomic<int> _action_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > next_state_;
  mutable std::atomic<int> _next_state_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// -------------------------------------------------------------------

class enb_transition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddrl.enb_transition) */ {
 public:
  inline enb_transition() : enb_transition(nullptr) {};
  virtual ~enb_transition();

  enb_transition(const enb_transition& from);
  enb_transition(enb_transition&& from) noexcept
    : enb_transition() {
    *this = ::std::move(from);
  }

  inline enb_transition& operator=(const enb_transition& from) {
    CopyFrom(from);
    return *this;
  }
  inline enb_transition& operator=(enb_transition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const enb_transition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const enb_transition* internal_default_instance() {
    return reinterpret_cast<const enb_transition*>(
               &_enb_transition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(enb_transition& a, enb_transition& b) {
    a.Swap(&b);
  }
  inline void Swap(enb_transition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enb_transition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline enb_transition* New() const final {
    return CreateMaybeMessage<enb_transition>(nullptr);
  }

  enb_transition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<enb_transition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const enb_transition& from);
  void MergeFrom(const enb_transition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enb_transition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddrl.enb_transition";
  }
  protected:
  explicit enb_transition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transition_2eproto);
    return ::descriptor_table_transition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransitionFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kTtiFieldNumber = 1,
  };
  // repeated .ddrl.ue_transition transition = 3;
  int transition_size() const;
  private:
  int _internal_transition_size() const;
  public:
  void clear_transition();
  ::ddrl::ue_transition* mutable_transition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::ue_transition >*
      mutable_transition();
  private:
  const ::ddrl::ue_transition& _internal_transition(int index) const;
  ::ddrl::ue_transition* _internal_add_transition();
  public:
  const ::ddrl::ue_transition& transition(int index) const;
  ::ddrl::ue_transition* add_transition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::ue_transition >&
      transition() const;

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 tti = 1;
  void clear_tti();
  ::PROTOBUF_NAMESPACE_ID::uint64 tti() const;
  void set_tti(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tti() const;
  void _internal_set_tti(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ddrl.enb_transition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::ue_transition > transition_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tti_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ue_transition

// uint32 rnti = 1;
inline void ue_transition::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_transition::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_transition::rnti() const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.rnti)
  return _internal_rnti();
}
inline void ue_transition::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void ue_transition::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.rnti)
}

// uint32 id = 2;
inline void ue_transition::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_transition::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_transition::id() const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.id)
  return _internal_id();
}
inline void ue_transition::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ue_transition::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.id)
}

// float reward = 3;
inline void ue_transition::clear_reward() {
  reward_ = 0;
}
inline float ue_transition::_internal_reward() const {
  return reward_;
}
inline float ue_transition::reward() const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.reward)
  return _internal_reward();
}
inline void ue_transition::_internal_set_reward(float value) {
  
  reward_ = value;
}
inline void ue_transition::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.reward)
}

// repeated float state = 4;
inline int ue_transition::_internal_state_size() const {
  return state_.size();
}
inline int ue_transition::state_size() const {
  return _internal_state_size();
}
inline void ue_transition::clear_state() {
  state_.Clear();
}
inline float ue_transition::_internal_state(int index) const {
  return state_.Get(index);
}
inline float ue_transition::state(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.state)
  return _internal_state(index);
}
inline void ue_transition::set_state(int index, float value) {
  state_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.state)
}
inline void ue_transition::_internal_add_state(float value) {
  state_.Add(value);
}
inline void ue_transition::add_state(float value) {
  _internal_add_state(value);
  // @@protoc_insertion_point(field_add:ddrl.ue_transition.state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::_internal_state() const {
  return state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::state() const {
  // @@protoc_insertion_point(field_list:ddrl.ue_transition.state)
  return _internal_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::_internal_mutable_state() {
  return &state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.ue_transition.state)
  return _internal_mutable_state();
}

// repeated float action = 5;
inline int ue_transition::_internal_action_size() const {
  return action_.size();
}
inline int ue_transition::action_size() const {
  return _internal_action_size();
}
inline void ue_transition::clear_action() {
  action_.Clear();
}
inline float ue_transition::_internal_action(int index) const {
  return action_.Get(index);
}
inline float ue_transition::action(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.action)
  return _internal_action(index);
}
inline void ue_transition::set_action(int index, float value) {
  action_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.action)
}
inline void ue_transition::_internal_add_action(float value) {
  action_.Add(value);
}
inline void ue_transition::add_action(float value) {
  _internal_add_action(value);
  // @@protoc_insertion_point(field_add:ddrl.ue_transition.action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::_internal_action() const {
  return action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::action() const {
  // @@protoc_insertion_point(field_list:ddrl.ue_transition.action)
  return _internal_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::_internal_mutable_action() {
  return &action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.ue_transition.action)
  return _internal_mutable_action();
}

// repeated float next_state = 6;
inline int ue_transition::_internal_next_state_size() const {
  return next_state_.size();
}
inline int ue_transition::next_state_size() const {
  return _internal_next_state_size();
}
inline void ue_transition::clear_next_state() {
  next_state_.Clear();
}
inline float ue_transition::_internal_next_state(int index) const {
  return next_state_.Get(index);
}
inline float ue_transition::next_state(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.ue_transition.next_state)
  return _internal_next_state(index);
}
inline void ue_transition::set_next_state(int index, float value) {
  next_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddrl.ue_transition.next_state)
}
inline void ue_transition::_internal_add_next_state(float value) {
  next_state_.Add(value);
}
inline void ue_transition::add_next_state(float value) {
  _internal_add_next_state(value);
  // @@protoc_insertion_point(field_add:ddrl.ue_transition.next_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::_internal_next_state() const {
  return next_state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ue_transition::next_state() const {
  // @@protoc_insertion_point(field_list:ddrl.ue_transition.next_state)
  return _internal_next_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::_internal_mutable_next_state() {
  return &next_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ue_transition::mutable_next_state() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.ue_transition.next_state)
  return _internal_mutable_next_state();
}

// -------------------------------------------------------------------

// enb_transition

// uint64 tti = 1;
inline void enb_transition::clear_tti() {
  tti_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 enb_transition::_internal_tti() const {
  return tti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 enb_transition::tti() const {
  // @@protoc_insertion_point(field_get:ddrl.enb_transition.tti)
  return _internal_tti();
}
inline void enb_transition::_internal_set_tti(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tti_ = value;
}
inline void enb_transition::set_tti(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tti(value);
  // @@protoc_insertion_point(field_set:ddrl.enb_transition.tti)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool enb_transition::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool enb_transition::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& enb_transition::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& enb_transition::timestamp() const {
  // @@protoc_insertion_point(field_get:ddrl.enb_transition.timestamp)
  return _internal_timestamp();
}
inline void enb_transition::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddrl.enb_transition.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* enb_transition::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* enb_transition::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:ddrl.enb_transition.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* enb_transition::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* enb_transition::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:ddrl.enb_transition.timestamp)
  return _internal_mutable_timestamp();
}
inline void enb_transition::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ddrl.enb_transition.timestamp)
}

// repeated .ddrl.ue_transition transition = 3;
inline int enb_transition::_internal_transition_size() const {
  return transition_.size();
}
inline int enb_transition::transition_size() const {
  return _internal_transition_size();
}
inline void enb_transition::clear_transition() {
  transition_.Clear();
}
inline ::ddrl::ue_transition* enb_transition::mutable_transition(int index) {
  // @@protoc_insertion_point(field_mutable:ddrl.enb_transition.transition)
  return transition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::ue_transition >*
enb_transition::mutable_transition() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.enb_transition.transition)
  return &transition_;
}
inline const ::ddrl::ue_transition& enb_transition::_internal_transition(int index) const {
  return transition_.Get(index);
}
inline const ::ddrl::ue_transition& enb_transition::transition(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.enb_transition.transition)
  return _internal_transition(index);
}
inline ::ddrl::ue_transition* enb_transition::_internal_add_transition() {
  return transition_.Add();
}
inline ::ddrl::ue_transition* enb_transition::add_transition() {
  // @@protoc_insertion_point(field_add:ddrl.enb_transition.transition)
  return _internal_add_transition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::ue_transition >&
enb_transition::transition() const {
  // @@protoc_insertion_point(field_list:ddrl.enb_transition.transition)
  return transition_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddrl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transition_2eproto
