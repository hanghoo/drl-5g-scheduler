// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_weight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_update_5fweight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_update_5fweight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nn_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_update_5fweight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_update_5fweight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_update_5fweight_2eproto;
namespace ddrl {
class model_weight;
class model_weightDefaultTypeInternal;
extern model_weightDefaultTypeInternal _model_weight_default_instance_;
class update_model_weight;
class update_model_weightDefaultTypeInternal;
extern update_model_weightDefaultTypeInternal _update_model_weight_default_instance_;
}  // namespace ddrl
PROTOBUF_NAMESPACE_OPEN
template<> ::ddrl::model_weight* Arena::CreateMaybeMessage<::ddrl::model_weight>(Arena*);
template<> ::ddrl::update_model_weight* Arena::CreateMaybeMessage<::ddrl::update_model_weight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ddrl {

// ===================================================================

class model_weight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddrl.model_weight) */ {
 public:
  inline model_weight() : model_weight(nullptr) {};
  virtual ~model_weight();

  model_weight(const model_weight& from);
  model_weight(model_weight&& from) noexcept
    : model_weight() {
    *this = ::std::move(from);
  }

  inline model_weight& operator=(const model_weight& from) {
    CopyFrom(from);
    return *this;
  }
  inline model_weight& operator=(model_weight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const model_weight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const model_weight* internal_default_instance() {
    return reinterpret_cast<const model_weight*>(
               &_model_weight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(model_weight& a, model_weight& b) {
    a.Swap(&b);
  }
  inline void Swap(model_weight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(model_weight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline model_weight* New() const final {
    return CreateMaybeMessage<model_weight>(nullptr);
  }

  model_weight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<model_weight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const model_weight& from);
  void MergeFrom(const model_weight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(model_weight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddrl.model_weight";
  }
  protected:
  explicit model_weight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_update_5fweight_2eproto);
    return ::descriptor_table_update_5fweight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorIndexFieldNumber = 1,
    kNDimFieldNumber = 2,
    kXIndexFieldNumber = 3,
    kYIndexFieldNumber = 4,
    kTauFieldNumber = 5,
    kValueFieldNumber = 6,
  };
  // uint32 tensor_index = 1;
  void clear_tensor_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 tensor_index() const;
  void set_tensor_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tensor_index() const;
  void _internal_set_tensor_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_dim = 2;
  void clear_n_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_dim() const;
  void set_n_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_dim() const;
  void _internal_set_n_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 x_index = 3;
  void clear_x_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 x_index() const;
  void set_x_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x_index() const;
  void _internal_set_x_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y_index = 4;
  void clear_y_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 y_index() const;
  void set_y_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y_index() const;
  void _internal_set_y_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float tau = 5;
  void clear_tau();
  float tau() const;
  void set_tau(float value);
  private:
  float _internal_tau() const;
  void _internal_set_tau(float value);
  public:

  // float value = 6;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:ddrl.model_weight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tensor_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_dim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_index_;
  float tau_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_update_5fweight_2eproto;
};
// -------------------------------------------------------------------

class update_model_weight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddrl.update_model_weight) */ {
 public:
  inline update_model_weight() : update_model_weight(nullptr) {};
  virtual ~update_model_weight();

  update_model_weight(const update_model_weight& from);
  update_model_weight(update_model_weight&& from) noexcept
    : update_model_weight() {
    *this = ::std::move(from);
  }

  inline update_model_weight& operator=(const update_model_weight& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_model_weight& operator=(update_model_weight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_model_weight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_model_weight* internal_default_instance() {
    return reinterpret_cast<const update_model_weight*>(
               &_update_model_weight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(update_model_weight& a, update_model_weight& b) {
    a.Swap(&b);
  }
  inline void Swap(update_model_weight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_model_weight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_model_weight* New() const final {
    return CreateMaybeMessage<update_model_weight>(nullptr);
  }

  update_model_weight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_model_weight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_model_weight& from);
  void MergeFrom(const update_model_weight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_model_weight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddrl.update_model_weight";
  }
  protected:
  explicit update_model_weight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_update_5fweight_2eproto);
    return ::descriptor_table_update_5fweight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 4,
    kNameFieldNumber = 1,
    kNnConfigFieldNumber = 2,
    kNTensorInModelFieldNumber = 3,
  };
  // repeated .ddrl.model_weight weight = 4;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  ::ddrl::model_weight* mutable_weight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::model_weight >*
      mutable_weight();
  private:
  const ::ddrl::model_weight& _internal_weight(int index) const;
  ::ddrl::model_weight* _internal_add_weight();
  public:
  const ::ddrl::model_weight& weight(int index) const;
  ::ddrl::model_weight* add_weight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::model_weight >&
      weight() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ddrl.nn_config nn_config = 2;
  bool has_nn_config() const;
  private:
  bool _internal_has_nn_config() const;
  public:
  void clear_nn_config();
  const ::ddrl::nn_config& nn_config() const;
  ::ddrl::nn_config* release_nn_config();
  ::ddrl::nn_config* mutable_nn_config();
  void set_allocated_nn_config(::ddrl::nn_config* nn_config);
  private:
  const ::ddrl::nn_config& _internal_nn_config() const;
  ::ddrl::nn_config* _internal_mutable_nn_config();
  public:
  void unsafe_arena_set_allocated_nn_config(
      ::ddrl::nn_config* nn_config);
  ::ddrl::nn_config* unsafe_arena_release_nn_config();

  // uint32 n_tensor_in_model = 3;
  void clear_n_tensor_in_model();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_tensor_in_model() const;
  void set_n_tensor_in_model(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_tensor_in_model() const;
  void _internal_set_n_tensor_in_model(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ddrl.update_model_weight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::model_weight > weight_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::ddrl::nn_config* nn_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_tensor_in_model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_update_5fweight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// model_weight

// uint32 tensor_index = 1;
inline void model_weight::clear_tensor_index() {
  tensor_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::_internal_tensor_index() const {
  return tensor_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::tensor_index() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.tensor_index)
  return _internal_tensor_index();
}
inline void model_weight::_internal_set_tensor_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tensor_index_ = value;
}
inline void model_weight::set_tensor_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tensor_index(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.tensor_index)
}

// uint32 n_dim = 2;
inline void model_weight::clear_n_dim() {
  n_dim_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::_internal_n_dim() const {
  return n_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::n_dim() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.n_dim)
  return _internal_n_dim();
}
inline void model_weight::_internal_set_n_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_dim_ = value;
}
inline void model_weight::set_n_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_dim(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.n_dim)
}

// uint32 x_index = 3;
inline void model_weight::clear_x_index() {
  x_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::_internal_x_index() const {
  return x_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::x_index() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.x_index)
  return _internal_x_index();
}
inline void model_weight::_internal_set_x_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_index_ = value;
}
inline void model_weight::set_x_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x_index(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.x_index)
}

// uint32 y_index = 4;
inline void model_weight::clear_y_index() {
  y_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::_internal_y_index() const {
  return y_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 model_weight::y_index() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.y_index)
  return _internal_y_index();
}
inline void model_weight::_internal_set_y_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_index_ = value;
}
inline void model_weight::set_y_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y_index(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.y_index)
}

// float tau = 5;
inline void model_weight::clear_tau() {
  tau_ = 0;
}
inline float model_weight::_internal_tau() const {
  return tau_;
}
inline float model_weight::tau() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.tau)
  return _internal_tau();
}
inline void model_weight::_internal_set_tau(float value) {
  
  tau_ = value;
}
inline void model_weight::set_tau(float value) {
  _internal_set_tau(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.tau)
}

// float value = 6;
inline void model_weight::clear_value() {
  value_ = 0;
}
inline float model_weight::_internal_value() const {
  return value_;
}
inline float model_weight::value() const {
  // @@protoc_insertion_point(field_get:ddrl.model_weight.value)
  return _internal_value();
}
inline void model_weight::_internal_set_value(float value) {
  
  value_ = value;
}
inline void model_weight::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ddrl.model_weight.value)
}

// -------------------------------------------------------------------

// update_model_weight

// string name = 1;
inline void update_model_weight::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& update_model_weight::name() const {
  // @@protoc_insertion_point(field_get:ddrl.update_model_weight.name)
  return _internal_name();
}
inline void update_model_weight::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ddrl.update_model_weight.name)
}
inline std::string* update_model_weight::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ddrl.update_model_weight.name)
  return _internal_mutable_name();
}
inline const std::string& update_model_weight::_internal_name() const {
  return name_.Get();
}
inline void update_model_weight::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void update_model_weight::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ddrl.update_model_weight.name)
}
inline void update_model_weight::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ddrl.update_model_weight.name)
}
inline void update_model_weight::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ddrl.update_model_weight.name)
}
inline std::string* update_model_weight::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* update_model_weight::release_name() {
  // @@protoc_insertion_point(field_release:ddrl.update_model_weight.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void update_model_weight::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ddrl.update_model_weight.name)
}
inline std::string* update_model_weight::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ddrl.update_model_weight.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void update_model_weight::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddrl.update_model_weight.name)
}

// .ddrl.nn_config nn_config = 2;
inline bool update_model_weight::_internal_has_nn_config() const {
  return this != internal_default_instance() && nn_config_ != nullptr;
}
inline bool update_model_weight::has_nn_config() const {
  return _internal_has_nn_config();
}
inline const ::ddrl::nn_config& update_model_weight::_internal_nn_config() const {
  const ::ddrl::nn_config* p = nn_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ddrl::nn_config*>(
      &::ddrl::_nn_config_default_instance_);
}
inline const ::ddrl::nn_config& update_model_weight::nn_config() const {
  // @@protoc_insertion_point(field_get:ddrl.update_model_weight.nn_config)
  return _internal_nn_config();
}
inline void update_model_weight::unsafe_arena_set_allocated_nn_config(
    ::ddrl::nn_config* nn_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nn_config_);
  }
  nn_config_ = nn_config;
  if (nn_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddrl.update_model_weight.nn_config)
}
inline ::ddrl::nn_config* update_model_weight::release_nn_config() {
  auto temp = unsafe_arena_release_nn_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ddrl::nn_config* update_model_weight::unsafe_arena_release_nn_config() {
  // @@protoc_insertion_point(field_release:ddrl.update_model_weight.nn_config)
  
  ::ddrl::nn_config* temp = nn_config_;
  nn_config_ = nullptr;
  return temp;
}
inline ::ddrl::nn_config* update_model_weight::_internal_mutable_nn_config() {
  
  if (nn_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ddrl::nn_config>(GetArena());
    nn_config_ = p;
  }
  return nn_config_;
}
inline ::ddrl::nn_config* update_model_weight::mutable_nn_config() {
  // @@protoc_insertion_point(field_mutable:ddrl.update_model_weight.nn_config)
  return _internal_mutable_nn_config();
}
inline void update_model_weight::set_allocated_nn_config(::ddrl::nn_config* nn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nn_config_);
  }
  if (nn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nn_config)->GetArena();
    if (message_arena != submessage_arena) {
      nn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nn_config, submessage_arena);
    }
    
  } else {
    
  }
  nn_config_ = nn_config;
  // @@protoc_insertion_point(field_set_allocated:ddrl.update_model_weight.nn_config)
}

// uint32 n_tensor_in_model = 3;
inline void update_model_weight::clear_n_tensor_in_model() {
  n_tensor_in_model_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 update_model_weight::_internal_n_tensor_in_model() const {
  return n_tensor_in_model_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 update_model_weight::n_tensor_in_model() const {
  // @@protoc_insertion_point(field_get:ddrl.update_model_weight.n_tensor_in_model)
  return _internal_n_tensor_in_model();
}
inline void update_model_weight::_internal_set_n_tensor_in_model(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_tensor_in_model_ = value;
}
inline void update_model_weight::set_n_tensor_in_model(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_tensor_in_model(value);
  // @@protoc_insertion_point(field_set:ddrl.update_model_weight.n_tensor_in_model)
}

// repeated .ddrl.model_weight weight = 4;
inline int update_model_weight::_internal_weight_size() const {
  return weight_.size();
}
inline int update_model_weight::weight_size() const {
  return _internal_weight_size();
}
inline void update_model_weight::clear_weight() {
  weight_.Clear();
}
inline ::ddrl::model_weight* update_model_weight::mutable_weight(int index) {
  // @@protoc_insertion_point(field_mutable:ddrl.update_model_weight.weight)
  return weight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::model_weight >*
update_model_weight::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.update_model_weight.weight)
  return &weight_;
}
inline const ::ddrl::model_weight& update_model_weight::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline const ::ddrl::model_weight& update_model_weight::weight(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.update_model_weight.weight)
  return _internal_weight(index);
}
inline ::ddrl::model_weight* update_model_weight::_internal_add_weight() {
  return weight_.Add();
}
inline ::ddrl::model_weight* update_model_weight::add_weight() {
  // @@protoc_insertion_point(field_add:ddrl.update_model_weight.weight)
  return _internal_add_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddrl::model_weight >&
update_model_weight::weight() const {
  // @@protoc_insertion_point(field_list:ddrl.update_model_weight.weight)
  return weight_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddrl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_update_5fweight_2eproto
